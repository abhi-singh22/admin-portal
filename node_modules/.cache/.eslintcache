[{"/Users/Global/Documents/react-app/src/index.js":"1","/Users/Global/Documents/react-app/src/App.js":"2","/Users/Global/Documents/react-app/src/components/Home.js":"3","/Users/Global/Documents/react-app/src/components/Select.js":"4","/Users/Global/Documents/GitHub/admin-portal/src/index.js":"5","/Users/Global/Documents/GitHub/admin-portal/src/App.js":"6","/Users/Global/Documents/GitHub/admin-portal/src/components/Home.js":"7","/Users/Global/Documents/GitHub/admin-portal/src/components/Select.js":"8"},{"size":445,"mtime":1676234226000,"results":"9","hashOfConfig":"10"},{"size":139,"mtime":1676371678942,"results":"11","hashOfConfig":"10"},{"size":6748,"mtime":1676460316863,"results":"12","hashOfConfig":"10"},{"size":416,"mtime":1676408368398,"results":"13","hashOfConfig":"10"},{"size":445,"mtime":1676234226000,"results":"14","hashOfConfig":"15"},{"size":139,"mtime":1676371678942,"results":"16","hashOfConfig":"15"},{"size":8482,"mtime":1676533598967,"results":"17","hashOfConfig":"15"},{"size":478,"mtime":1676529772853,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"db0mpa",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1y6haac",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Global/Documents/react-app/src/index.js",[],[],"/Users/Global/Documents/react-app/src/App.js",[],[],"/Users/Global/Documents/react-app/src/components/Home.js",["44","45","46","47"],[],"/Users/Global/Documents/react-app/src/components/Select.js",[],[],"/Users/Global/Documents/GitHub/admin-portal/src/index.js",[],[],"/Users/Global/Documents/GitHub/admin-portal/src/App.js",[],[],"/Users/Global/Documents/GitHub/admin-portal/src/components/Home.js",["48","49","50","51"],[],"import './Home.css';\nimport Select from './Select';\nimport React, { useState } from 'react';\nimport axios from \"axios\";\n\nfunction Home() {\n    const initialErrorMessege = {\n        firstName: false,\n        lastName: false,\n        gender: false,\n        dob: false,\n        race: false,\n        carrierName: false,\n        memberId: false,\n    };\n\n    const [formValues, setFormValues] = useState({});\n    const [isFormValid, setIsFormValid] = useState(true);\n    const [isInsuranceValid, setIsInsuranceValid] = useState();\n    const [errorMessege, setErrorMessege] = useState(initialErrorMessege);\n\n    const genderOptions = [{ label: 'Select', value: '' }, { label: 'Male', value: 'male' }, { label: 'Female', value: 'female' }, { label: 'Other', value: 'other' }]\n    const raceOptions = [{ label: 'Select', value: '' }, { label: 'American Indian or Alaskan Native', value: 'americanIndian' }, { label: 'Asian', value: 'asian' }, { label: 'Black or African American', value: 'black' }, { label: 'White', value: 'white' }, { label: 'Decline to Answer', value: 'decline' }];\n    const ethenticityOptions = [{ label: 'Select', value: '' }, { label: 'Hispanic or Latin', value: 'hispanic' }, { label: 'Non-Hispanic or Latin', value: 'nonHispanic' }, { label: 'Decline to Answer', value: 'decline' }];\n    const carrierNameOptions = [{ label: 'Select', value: '' }, { label: 'Aetna', value: 'aetna' }, { label: 'BCBS', value: 'bcbs' }, { label: 'Kaiser', value: 'kaiser' }, { label: 'Optum', value: 'optum' }];\n    const relationshipOptions = [{ label: 'Select', value: '' }, { label: 'Self', value: 'self' }, { label: 'Spouse', value: 'spouse' }, { label: 'Parent', value: 'parent' }, { label: 'Child', value: 'child' }, { label: 'Other', value: 'other' }];\n    const mandatoryFields = [\"firstName\", \"lastName\", \"gender\", \"dob\", \"race\", \"carrierName\", \"memberId\"]\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const options = {\n            method: 'POST',\n            url: 'https://eligibilitycheck.onrender.com/valid-insurance',\n            data: formValues\n        };\n        axios\n            .request(options)\n            .then(function (response) {\n                setIsInsuranceValid(response.data.message)\n            })\n            .catch(function (error) {\n                new Error(error)\n            });\n        setTimeout(() => { setIsInsuranceValid() }, 6000)\n    }\n\n    function handleUserInput(e) {\n        const name = e.target.name;\n        const value = e.target.value;\n        setFormValues({ ...formValues, [name]: value.trim() });\n    }\n\n    function showErrorMessege(e) {\n        const name = e.target.name;\n        const value = e.target.value.trim();\n        setErrorMessege({ ...errorMessege, [name]: !value.length })\n        return\n    }\n\n    return (\n        <div className=\"border-box\">\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-header\">Patient Information</div>\n                <div className=\"form-fields-class\">\n                    <div className=\"fieldsRows\">\n                        <span>\n                            <label htmlFor=\"firstName\">First Name<span className=\"req\">*</span></label>\n                            <input id=\"name\" type=\"text\" name=\"firstName\" placeholder=\"First Name\" onChange={(event) => handleUserInput(event)} onBlur={(event) => showErrorMessege(event)}></input>\n                            {(errorMessege.firstName) && <span className=\"req\">First Name is Required</span>}\n                        </span>\n                        <span>\n                            <label htmlFor=\"lastName\">Last Name<span className=\"req\">*</span></label>\n                            <input id=\"name\" type=\"text\" name=\"lastName\" placeholder=\"Last Name\" onChange={(event) => handleUserInput(event)} onBlur={(event) => showErrorMessege(event)}></input>\n                            {(errorMessege.lastName) && <span className=\"req\">Last Name is Required</span>}\n                        </span>\n                    </div>\n                    <div className=\"fieldsRows\">\n                        <span>\n                            <label htmlFor=\"gender\">Gender<span className=\"req\">*</span></label>\n                            <Select options={genderOptions} handleInput={handleUserInput} name=\"gender\" id=\"gender\" showErrorMessege={showErrorMessege}/>\n                            {(errorMessege.gender) && <span className=\"req\">Gender is Required</span>}\n                        </span>\n                        <span>\n                            <label htmlFor=\"dob\">DOB<span className=\"req\">*</span></label>\n                            <input id=\"dob\" type=\"date\" name=\"dob\" placeholder=\"MM/DD/YYYY\" onChange={(event) => handleUserInput(event)} onBlur={(event) => showErrorMessege(event)}></input>\n                            {(errorMessege.dob) && <span className=\"req\">DOB is Required</span>}\n                        </span>\n                    </div>\n                    <div className=\"fieldsRows\">\n                        <span>\n                            <label htmlFor=\"race\">Race<span className=\"req\">*</span></label>\n                            <Select options={raceOptions} handleInput={handleUserInput} name=\"race\" id=\"race\" showErrorMessege={showErrorMessege}/>\n                            {(errorMessege.race) && <span className=\"req\">Race is Required</span>}\n                        </span>\n                        <span>\n                            <label htmlFor=\"ethenticity\">Ethenticity</label>\n                            <Select options={ethenticityOptions} handleInput={handleUserInput} name=\"ethenticity\" id=\"ethenticity\" />\n                        </span>\n                    </div>\n                </div>\n                <div className=\"form-header\">Patient Insurance Information</div>\n                <div className=\"form-fields-class\">\n                    <div className=\"carrierClass\">\n                        <span>\n                            <label htmlFor=\"carrierName\">Carrier Name<span className=\"req\">*</span></label>\n                            <Select options={carrierNameOptions} handleInput={handleUserInput} name=\"carrierName\" id=\"carrierName\" showErrorMessege={showErrorMessege}/>\n                            {(errorMessege.carrierName) && <span className=\"req\">Carrier Name is Required</span>}\n                        </span>\n                    </div>\n                    <div className=\"fieldsRows\">\n                        <span>\n                            <label htmlFor=\"memberId\">Member ID<span className=\"req\">*</span></label>\n                            <input id=\"memberId\" type=\"text\" name=\"memberId\" placeholder=\"Member ID\" onChange={(event) => handleUserInput(event)} onBlur={(event) => showErrorMessege(event)}></input>\n                            {(errorMessege.memberId) && <span className=\"req\">Member ID is Required</span>}\n                        </span>\n                        <span>\n                            <label htmlFor=\"groupNumber\">Group Number</label>\n                            <input id=\"groupNumber\" type=\"text\" name=\"groupNumber\" placeholder=\"Group Number\" onChange={(event) => handleUserInput(event)}></input>\n                        </span>\n                    </div>\n                    <div className=\"carrierClass\">\n                        <span>\n                            <label htmlFor=\"relationship\">Relationship</label>\n                            <Select options={relationshipOptions} handleInput={handleUserInput} name=\"relationship\" id=\"relationship\" />\n                        </span>\n                    </div >\n                    <div className=\"message-box\">\n                        {(isInsuranceValid == 'valid') && <div className=\"valid-insurance-message message-box\">\n                            <span>'Valid Insurance' <br /> Patient Health Insurance Validated </span>\n                        </div>}\n                        {(isInsuranceValid == 'invalid') && <div className=\"invalid-insurance-message message-box\">\n                            <span>'Invalid Insurance' <br /> Please check details entered & Submit again </span>\n                        </div>}\n                    </div>\n                    <div>\n                        <button type=\"submit\" disabled={!isFormValid} className=\"validate-buttom\"><b>Validate Insurance</b></button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default Home;\n","/Users/Global/Documents/GitHub/admin-portal/src/components/Select.js",[],[],{"ruleId":"52","severity":1,"message":"53","line":3,"column":27,"nodeType":"54","messageId":"55","endLine":3,"endColumn":35},{"ruleId":"52","severity":1,"message":"56","line":22,"column":25,"nodeType":"54","messageId":"55","endLine":22,"endColumn":39},{"ruleId":"52","severity":1,"message":"57","line":46,"column":14,"nodeType":"54","messageId":"55","endLine":46,"endColumn":31},{"ruleId":"58","severity":1,"message":"59","line":121,"column":39,"nodeType":"60","messageId":"61","endLine":121,"endColumn":41},{"ruleId":"52","severity":1,"message":"56","line":18,"column":25,"nodeType":"54","messageId":"55","endLine":18,"endColumn":39},{"ruleId":"52","severity":1,"message":"62","line":27,"column":11,"nodeType":"54","messageId":"55","endLine":27,"endColumn":26},{"ruleId":"58","severity":1,"message":"59","line":127,"column":44,"nodeType":"60","messageId":"61","endLine":127,"endColumn":46},{"ruleId":"58","severity":1,"message":"59","line":130,"column":44,"nodeType":"60","messageId":"61","endLine":130,"endColumn":46},"no-unused-vars","'setState' is defined but never used.","Identifier","unusedVar","'setIsFormValid' is assigned a value but never used.","'validateInsurance' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'mandatoryFields' is assigned a value but never used."]